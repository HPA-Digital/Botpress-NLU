{"version":3,"sources":["webpack:///webpack/bootstrap c09252fedfefa443f111","webpack:///external \"lodash\"","webpack:///external \"crypto\"","webpack:///./src/providers/base.js","webpack:///external \"bluebird\"","webpack:///./src/providers/entities.js","webpack:///external \"axios\"","webpack:///./src/index.js","webpack:///external \"bluebird-retry\"","webpack:///external \"moment\"","webpack:///./src/storage.js","webpack:///external \"mkdirp\"","webpack:///external \"path\"","webpack:///./src/parser.js","webpack:///./src/providers/dialogflow.js","webpack:///external \"dialogflow\"","webpack:///./src/providers/luis.js","webpack:///./src/providers/rasa.js","webpack:///external \"ms\"","webpack:///./src/providers/recast.js","webpack:///./src/providers/native.js","webpack:///external \"zscore\"","webpack:///external \"natural\""],"names":["ENVIRONEMENT","process","env","NODE_ENV","Provider","name","entityKey","logger","config","storage","parser","kvs","isProduction","Error","incomingText","getCustomEntities","_getProviderEntities","_","toPairs","Entities","filter","p","map","isFromProvider","nameProvider","defaultExtractData","intent","confidence","provider","intents","entities","module","exports","intentsDir","type","required","default","entitiesDir","googleProjectId","luisAppId","luisProgrammaticKey","luisAppSecret","luisAppRegion","rasaEndpoint","rasaToken","rasaProject","recastToken","recastUserSlug","recastBotSlug","debugModeEnabled","minimumConfidence","maximumConfidence","nativeAdjustementThreshold","maximumRequestsPerHour","init","bp","configurator","event","includes","JSON","get","previous","parse","hour","startOf","requestsCount","isSame","set","stringify","parseFloat","eventIntent","eventIntents","info","text","raw","extract","retryPolicy","metadata","Object","assign","nlu","warn","message","intentConfidentEnough","MIN_CONFIDENCE","MAX_CONFIDENCE","is","intentName","toLowerCase","startsWith","prefix","has","find","processEvent","loadAll","Storage","initializeGhost","dialogflow","DialogflowProvider","luis","LuisProvider","rasa","RasaProvider","recast","RecastProvider","native","NativeProvider","isNaN","Parser","interval","max_interval","timeout","max_tries","middlewares","register","handler","next","order","description","ready","router","getRouter","delete","req","res","deleteIntent","params","sendStatus","post","saveIntent","body","getIntents","send","getIntent","getAvailableEntities","x","checkSyncNeeded","events","emit","time","sync","status","formatFilename","replace","ghost","ghostManager","projectDir","projectLocation","mkdirp","path","resolve","addRootFolder","filesGlob","content","length","utterancesFile","propertiesFile","utterances","join","upsertFile","deleteFile","code","directoryListing","Promise","mapSeries","filename","readFile","propertiesContent","utterancesContent","split","properties","getCustomEntity","entity","definitionContent","definition","canonicalUtterance","intentEntities","labels","plainText","regex","m","i","exec","substr","index","push","start","end","entityName","projectId","require","v2","agentClient","AgentsClient","sessionClient","SessionsClient","contextClient","ContextsClient","shortUserId","crypto","createHash","update","digest","field","kind","values","_resolveEntity","v","mapValues","fields","f","getAgent","parent","projectPath","agent","request","session","sessionPath","_getSessionId","queryInput","languageCode","defaultLanguageCode","queryParams","sentimentAnalysisRequestConfig","analyzeQueryTextSentiment","detectIntent","detection","queryResult","isSmallTalk","action","displayName","intentDetectionConfidence","parameters","k","value","context","add","lifespan","contextPath","createContextRequest","lifespanCount","createContext","debug","toFixed","original","position","LUIS_APP_VERSION","LUIS_HASH_KVS_KEY","appId","programmaticKey","appSecret","appRegion","axios","headers","data","version","del","statusCode","response","localIntents","remoteVersion","intentsHash","hash","lastModifiedDateTime","getRemoteVersion","currentVersion","isInSync","getCustomLuisEntities","simples","composites","lists","mapToType","list","providerType","simplesDef","e","compositesDef","listsDef","missingPattern","isEmpty","syncingSince","Date","validateCredentials","deleteVersion","builtinEntities","simpleEntities","compositeEntities","listEntities","availableEntities","forEach","extracted","extractLabelsFromCanonical","utterance","trim","label","indexOf","startPos","endPos","getAppInfo","appInfo","luis_schema_version","versionId","desc","culture","closedLists","bing_entities","model_features","regex_features","result","train","onSyncSuccess","detailedError","error","models","percent","details","modelId","failureReason","delay","isStaging","region","incomingEvent","q","verbose","spellCheck","staging","score","unit","startIndex","RASA_HASH_KVS_KEY","endpoint","token","project","client","create","baseURL","_getRemoteVersions","remoteVersions","_isInSync","scope","projectName","_getProjectName","versions","last","sortBy","_modelId","sample","rasa_nlu_data","common_examples","entity_synonyms","_training","msg","errorMsg","_onSyncSuccess","_cacheLatestModel","latestModel","model","extractor","RECAST_HASH_KVS_KEY","Authorization","intentSlug","expressionId","expression","put","gazetteSlug","entity_id","syncing","_getIntentsHash","_getBotModel","results","defaultLanguage","language","isocode","_getRemoteGazettes","remoteGazettes","_deleteGazette","customEntities","_postGazette","remoteGazette","pick","_getRemoteIntents","remoteIntents","_deleteIntent","u","expressions","source","_postIntent","_getBulkCreations","_getRemoteIntentExpressions","remoteIntentExpressions","expr","_getRemoteExpression","id","remoteIntentExpression","word","tokens","t","slug","gazette","_updateRemoteExpression","savedHash","key","entityType","omit","valueSize","size","keys","act","detected","processed","processing_language","sentiment","NATIVE_HASH_KVS_KEY","NATIVE_MODEL","DEFAULT_THRESHOLD","EMPTY_INTENT","classifier","stemmer","customStemmer","isFunction","tokenizeAndStem","_stemText","bind","natural","PorterStemmer","BayesClassifier","restore","getStemmer","samples_count","addDocument","_restoreModel","threshold","classifications","orderBy","getClassifications","allScores","c","s","delta","Math","abs","max"],"mappings":"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","file":"node.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"C:\\\\Users\\\\AranM\\\\Projects\\\\maori\\\\Botpress\\\\Botpress-NLU\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap c09252fedfefa443f111","module.exports = require(\"lodash\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lodash\"\n// module id = 0\n// module chunks = 0","module.exports = require(\"crypto\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"crypto\"\n// module id = 1\n// module chunks = 0","const ENVIRONEMENT = process.env.NODE_ENV === 'production' ? 'prod' : 'dev'\r\n\r\nimport Entities from './entities'\r\nimport _ from 'lodash'\r\n\r\nexport default class Provider {\r\n  constructor({ name, entityKey, logger, config, storage, parser, kvs }) {\r\n    this.name = name\r\n    this.entityKey = entityKey\r\n    this.logger = logger\r\n    this.storage = storage\r\n    this.kvs = kvs\r\n    this.config = config\r\n    this.parser = parser\r\n    this.isProduction = ENVIRONEMENT === 'prod'\r\n    this.env = ENVIRONEMENT\r\n  }\r\n\r\n  /*******\r\n  Public API\r\n  *******/\r\n\r\n  async init() {}\r\n\r\n  async sync() {\r\n    throw new Error('Not implemented')\r\n  }\r\n\r\n  async checkSyncNeeded() {\r\n    throw new Error('Not implemented')\r\n  }\r\n\r\n  async extract(incomingText) {\r\n    throw new Error('Not implemented')\r\n  }\r\n\r\n  async getCustomEntities() {\r\n    throw new Error('Not implemented')\r\n  }\r\n\r\n  /*******\r\n  Shared API\r\n  *******/\r\n\r\n  async getAvailableEntities() {\r\n    return [...(await this.getCustomEntities()), ...(await this._getProviderEntities())]\r\n  }\r\n\r\n  /*******\r\n  Private Methods\r\n  *******/\r\n\r\n  async _getProviderEntities() {\r\n    return _.toPairs(Entities)\r\n      .filter(p => p[1][this.entityKey])\r\n      .map(p => ({\r\n        name: p[0],\r\n        isFromProvider: true,\r\n        nameProvider: p[1][this.entityKey]\r\n      }))\r\n  }\r\n}\r\n\r\nexport const defaultExtractData = provider => ({\r\n  intent: {\r\n    name: 'None',\r\n    confidence: 0,\r\n    provider\r\n  },\r\n  intents: [],\r\n  entities: []\r\n})\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/base.js","module.exports = require(\"bluebird\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"bluebird\"\n// module id = 3\n// module chunks = 0","export default {\r\n  // Date & Time\r\n  '@native.date': { '@luis': 'datetimeV2', '@dialogflow': 'date', '@recast': 'datetime' },\r\n  '@native.date-period': { '@luis': 'datetimeV2', '@dialogflow': 'date-period', '@recast': 'interval' },\r\n  '@native.date-time': { '@luis': 'datetimeV2', '@dialogflow': 'date-time', '@recast': 'datetime' },\r\n  '@native.time': { '@luis': 'datetimeV2', '@dialogflow': 'time', '@recast': 'datetime' },\r\n  '@native.time-period': { '@luis': 'datetimeV2', '@dialogflow': 'time-period', '@recast': 'interval' },\r\n\r\n  // Numbers\r\n  '@native.cardinal': { '@dialogflow': 'cardinal', '@recast': 'cardinal' },\r\n  '@native.flight-number': { '@dialogflow': 'flight-number' },\r\n  '@native.number': { '@dialogflow': 'number', '@luis': 'number', '@recast': 'number' },\r\n  '@native.number-integer': { '@dialogflow': 'number-integer', '@recast': 'ordinal' },\r\n  '@native.number-sequence': { '@dialogflow': 'number-sequence' },\r\n  '@native.ordinal': { '@luis': 'ordinal', '@dialogflow': 'ordinal', '@recast': 'ordinal' },\r\n\r\n  // Amounts with Units\r\n  '@native.age': { '@dialogflow': 'age', '@luis': 'age' },\r\n  '@native.duration': { '@dialogflow': 'duration', '@recast': 'duration' },\r\n  '@native.percentage': { '@luis': 'percentage', '@dialogflow': 'percentage', '@recast': 'percent' },\r\n  '@native.set': { '@recast': 'set' },\r\n  '@native.temperature': { '@luis': 'temperature', '@dialogflow': 'temperature', '@recast': 'temperature' },\r\n  '@native.unit-area': { '@luis': 'dimension', '@dialogflow': 'unit-area' },\r\n  '@native.unit-currency': { '@luis': 'money', '@dialogflow': 'unit-currency', '@recast': 'money' },\r\n  '@native.unit-information': { '@dialogflow': 'unit-information' },\r\n  '@native.unit-length': { '@luis': 'dimension', '@dialogflow': 'unit-lenght', '@recast': 'distance' },\r\n  '@native.unit-speed': { '@dialogflow': 'unit-speed', '@recast': 'speed' },\r\n  '@native.unit-volume': { '@dialogflow': 'unit-volume', '@recast': 'volume' },\r\n  '@native.unit-weight': { '@dialogflow': 'unit-weight', '@recast': 'mass' },\r\n\r\n  // Unit Names\r\n  '@native.currency-name': { '@dialogflow': 'currency-name' },\r\n  '@native.unit-area-name': { '@dialogflow': 'unit-area-name' },\r\n  '@native.unit-information-name': { '@dialogflow': 'unit-information-name' },\r\n  '@native.unit-length-name': { '@dialogflow': 'unit-lenght-name' },\r\n  '@native.unit-speed-name': { '@dialogflow': 'unit-speed-name' },\r\n  '@native.unit-volume-name': { '@dialogflow': 'unit-volume-name' },\r\n  '@native.unit-weight-name': { '@dialogflow': 'unit-weight-name' },\r\n\r\n  // Geography\r\n  '@native.address': { '@dialogflow': 'address', '@recast': 'location' },\r\n  '@native.airport': { '@dialogflow': 'airport', '@recast': 'location' },\r\n  '@native.geo-capital': { '@dialogflow': 'geo-capital' },\r\n  '@native.geo-country': { '@dialogflow': 'geo-country', '@recast': 'location' },\r\n  '@native.geo-country-code': { '@dialogflow': 'geo-country-code' },\r\n  '@native.geo-city': { '@dialogflow': 'geo-city', '@recast': 'location' },\r\n  '@native.geo-city-gb': { '@dialogflow': 'geo-city-gb', '@recast': 'location' },\r\n  '@native.geo-city-us': { '@dialogflow': 'geo-city-us', '@recast': 'location' },\r\n  '@native.geo-state-us': { '@dialogflow': 'geo-state-us', '@recast': 'location' },\r\n  '@native.ip': { '@recast': 'ip' },\r\n  '@native.location': { '@dialogflow': 'location', '@recast': 'location' },\r\n  '@native.place-attraction-us': { '@dialogflow': 'place-attraction-us', '@recast': 'location' },\r\n  '@native.place-attraction-gb': { '@dialogflow': 'place-attraction-gb', '@recast': 'location' },\r\n  '@native.street-address': { '@dialogflow': 'street-address', '@recast': 'location' },\r\n  '@native.zip-code': { '@dialogflow': 'zip-code', '@recast': 'location' },\r\n\r\n  // Contacts\r\n  '@native.email': { '@luis': 'email', '@dialogflow': 'email', '@recast': 'email' },\r\n  '@native.phone-number': { '@luis': 'phonenumber', '@dialogflow': 'phone-number', '@recast': 'phone' },\r\n\r\n  // Person\r\n  '@native.given-name': { '@dialogflow': 'given-name' },\r\n  '@native.last-name': { '@dialogflow': 'last-name' },\r\n  '@native.name': { '@recast': 'person' },\r\n  '@native.nationality': { '@recast': 'nationality' },\r\n\r\n  // Music\r\n  '@native.music-artist': { '@dialogflow': 'music-artist' },\r\n  '@native.music-genre': { '@dialogflow': 'music-genre' },\r\n\r\n  // Others\r\n  '@native.color': { '@dialogflow': 'color', '@recast': 'color' },\r\n  '@native.emoji': { '@recast': 'emoji' },\r\n  '@native.job': { '@recast': 'job' },\r\n  '@native.language': { '@dialogflow': 'language', '@recast': 'language' },\r\n  '@native.organization': { '@recast': 'organization' },\r\n  '@native.pronoun': { '@recast': 'pronoun' },\r\n  '@native.sort': { '@recast': 'sort' },\r\n  '@native.url': { '@luis': 'url', '@dialogflow': 'url', '@recast': 'url' },\r\n\r\n  // Generic\r\n  '@native.any': { '@dialogflow': 'any', '@rasa': 'any' }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/entities.js","module.exports = require(\"axios\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"axios\"\n// module id = 5\n// module chunks = 0","import retry from 'bluebird-retry'\r\nimport moment from 'moment'\r\n\r\nimport Storage from './storage'\r\nimport Parser from './parser'\r\n\r\nimport DialogflowProvider from './providers/dialogflow'\r\nimport LuisProvider from './providers/luis'\r\nimport RasaProvider from './providers/rasa'\r\nimport RecastProvider from './providers/recast'\r\nimport NativeProvider from './providers/native'\r\n\r\nlet storage\r\nlet provider\r\n\r\nmodule.exports = {\r\n  config: {\r\n    intentsDir: { type: 'string', required: true, default: './intents', env: 'NLU_INTENTS_DIR' },\r\n    entitiesDir: { type: 'string', required: true, default: './entities', env: 'NLU_ENTITIES_DIR' },\r\n\r\n    // Provider config\r\n    provider: { type: 'string', required: true, default: 'native', env: 'NLU_PROVIDER' },\r\n\r\n    // DIALOGFLOW-specific config\r\n    googleProjectId: { type: 'string', required: false, default: '', env: 'NLU_GOOGLE_PROJECT_ID' },\r\n\r\n    // LUIS-specific config\r\n    luisAppId: { type: 'string', required: false, default: '', env: 'NLU_LUIS_APP_ID' },\r\n    luisProgrammaticKey: { type: 'string', required: false, default: '', env: 'NLU_LUIS_PROGRAMMATIC_KEY' },\r\n    luisAppSecret: { type: 'string', required: false, default: '', env: 'NLU_LUIS_APP_SECRET' },\r\n    luisAppRegion: { type: 'string', required: false, default: 'westus', env: 'NLU_LUIS_APP_REGION' },\r\n\r\n    // RASA-specific config\r\n    rasaEndpoint: { type: 'string', required: false, default: 'http://localhost:5000', env: 'NLU_RASA_URL' },\r\n    rasaToken: { type: 'string', required: false, default: '', env: 'NLU_RASA_TOKEN' },\r\n    rasaProject: { type: 'string', required: false, default: 'botpress', env: 'NLU_RASA_PROJECT' },\r\n\r\n    // RECAST-specific config\r\n    recastToken: { type: 'string', required: false, default: '', env: 'NLU_RECAST_TOKEN' },\r\n    recastUserSlug: { type: 'string', required: false, default: '', env: 'NLU_RECAST_USER_SLUG' },\r\n    recastBotSlug: { type: 'string', required: false, default: '', env: 'NLU_RECAST_BOT_SLUG' },\r\n\r\n    // Debug mode will print NLU information to the console for debugging purposes\r\n    debugModeEnabled: { type: 'bool', required: true, default: false, env: 'NLU_DEBUG_ENABLED' },\r\n\r\n    // The minimum confidence required (in %) for an intent to match\r\n    // Set to '0' to always match\r\n    minimumConfidence: { type: 'string', required: false, default: '0.3', env: 'NLU_MIN_CONFIDENCE' },\r\n\r\n    // The maximum confidence after which it is considered a statistical error\r\n    // Mostly irrelevant except for NLU=native\r\n    maximumConfidence: { type: 'string', required: false, default: '1000', env: 'NLU_MAX_CONFIDENCE' },\r\n\r\n    // The minimum difference between scores required before we apply a distribution fixes\r\n    nativeAdjustementThreshold: { type: 'string', required: false, default: '0.25', env: 'NLU_NATIVE_ADJ_THRESHOLD' },\r\n    // The maximum number of requests per hour\r\n    // Useful to make sure you don't overuse your budget on paid NLU-services (like LUIS)\r\n    maximumRequestsPerHour: { type: 'string', required: false, default: '1000', env: 'NLU_MAX_REQUESTS_PER_HOUR' }\r\n  },\r\n\r\n  init: async function(bp, configurator) {\r\n    const config = await configurator.loadAll()\r\n    storage = new Storage({ bp, config })\r\n    await storage.initializeGhost()\r\n\r\n    const Provider = {\r\n      dialogflow: DialogflowProvider,\r\n      luis: LuisProvider,\r\n      rasa: RasaProvider,\r\n      recast: RecastProvider,\r\n      native: NativeProvider\r\n    }[config.provider.toLowerCase()]\r\n\r\n    if (!Provider) {\r\n      throw new Error(`Unknown NLU provider \"${config.provider}\"`)\r\n    }\r\n\r\n    let MIN_CONFIDENCE = parseFloat(config.minimumConfidence)\r\n\r\n    if (isNaN(MIN_CONFIDENCE) || MIN_CONFIDENCE < 0 || MIN_CONFIDENCE > 1) {\r\n      MIN_CONFIDENCE = 0\r\n    }\r\n\r\n    let MAX_CONFIDENCE = parseFloat(config.maximumConfidence)\r\n\r\n    if (isNaN(MAX_CONFIDENCE) || MAX_CONFIDENCE < 0) {\r\n      MAX_CONFIDENCE = 10000\r\n    }\r\n\r\n    provider = new Provider({\r\n      logger: bp.logger,\r\n      storage,\r\n      parser: new Parser(),\r\n      kvs: bp.kvs,\r\n      config\r\n    })\r\n    await provider.init()\r\n\r\n    const retryPolicy = {\r\n      interval: 100,\r\n      max_interval: 500,\r\n      timeout: 5000,\r\n      max_tries: 3\r\n    }\r\n\r\n    async function processEvent(event) {\r\n\r\n      if (['session_reset', 'bp_dialog_timeout', 'visit', 'read', 'delivery'].includes(event.type)) {\r\n        return\r\n      }\r\n\r\n      const previous = JSON.parse((await bp.kvs.get('nlu/requestsLimit')) || '{}')\r\n      const hour = moment().startOf('hour')\r\n      const requestsCount = hour.isSame(previous.hour) ? previous.requestsCount : 0\r\n\r\n      await bp.kvs.set('nlu/requestsLimit', JSON.stringify({ hour, requestsCount: requestsCount + 1 }))\r\n\r\n      const maximumRequestsPerHour = parseFloat(config.maximumRequestsPerHour)\r\n      if (requestsCount > maximumRequestsPerHour) {\r\n        throw new Error(\r\n          `[NLU] Requests limit per hour exceeded: ${maximumRequestsPerHour} allowed ` +\r\n            `while getting ${requestsCount}. You can set higher value to NLU_MAX_REQUESTS_PER_HOUR.`\r\n        )\r\n      }\r\n\r\n      let eventIntent = {}\r\n      let eventIntents = []\r\n\r\n      try {\r\n        if (config.debugModeEnabled) {\r\n          bp.logger.info('[NLU Extraction] ' + event.text, event.raw)\r\n        }\r\n\r\n        const metadata = await retry(() => provider.extract(event), retryPolicy)\r\n\r\n        if (metadata) {\r\n          Object.assign(event, { nlu: metadata })\r\n          eventIntent = metadata.intent\r\n          eventIntents = metadata.intents\r\n        }\r\n      } catch (err) {\r\n        bp.logger.warn('[NLU] Error extracting metadata for incoming text: ' + err.message)\r\n      }\r\n\r\n      const intentConfidentEnough = () => {\r\n        const confidence = eventIntent.confidence != null ? eventIntent.confidence : 1\r\n        return confidence >= MIN_CONFIDENCE && confidence <= MAX_CONFIDENCE\r\n      }\r\n\r\n      if (event.nlu) {\r\n        Object.assign(event.nlu.intent, {\r\n          intentConfidentEnough,\r\n          is: intentName => {\r\n            intentName = (intentName || '').toLowerCase()\r\n            return intentConfidentEnough() && (eventIntent.name || '').toLowerCase() === intentName\r\n          },\r\n          startsWith: prefix => {\r\n            prefix = (prefix || '').toLowerCase()\r\n            return intentConfidentEnough() && (eventIntent.name || '').toLowerCase().startsWith(prefix)\r\n          }\r\n        })\r\n        Object.assign(event.nlu.intents, {\r\n          has: intentName => {\r\n            intentName = (intentName || '').toLowerCase()\r\n            return !!eventIntents.find(intent => (intent.name || '').toLowerCase() === intentName)\r\n          }\r\n        })\r\n      }\r\n    }\r\n\r\n    bp.nlu = {\r\n      processEvent,\r\n      provider,\r\n      storage\r\n    }\r\n\r\n    bp.middlewares.register({\r\n      name: 'nlu.incoming',\r\n      module: 'botpress-nlu',\r\n      type: 'incoming',\r\n      handler: async (event, next) => {\r\n        await processEvent(event)\r\n        next()\r\n      },\r\n      order: 10,\r\n      description:\r\n        'Process natural language in the form of text. Structured data with an action and parameters for that action is injected in the incoming message event.'\r\n    })\r\n  },\r\n\r\n  ready: async function(bp) {\r\n    const router = bp.getRouter('botpress-nlu')\r\n\r\n    router.delete('/intents/:intent', async (req, res) => {\r\n      await storage.deleteIntent(req.params.intent)\r\n      res.sendStatus(200)\r\n    })\r\n\r\n    router.post('/intents/:intent', async (req, res) => {\r\n      await storage.saveIntent(req.params.intent, req.body)\r\n      res.sendStatus(200)\r\n    })\r\n\r\n    router.get('/intents', async (req, res) => {\r\n      res.send(await storage.getIntents())\r\n    })\r\n\r\n    router.get('/intents/:intent', async (req, res) => {\r\n      res.send(await storage.getIntent(req.params.intent))\r\n    })\r\n\r\n    router.get('/entities', async (req, res) => {\r\n      res.send((await provider.getAvailableEntities()).map(x => x.name))\r\n    })\r\n\r\n    router.get('/sync/check', async (req, res) => {\r\n      res.send(await provider.checkSyncNeeded())\r\n    })\r\n\r\n    router.get('/sync', async (req, res) => {\r\n      try {\r\n        bp.events.emit('toast.nlu-sync', { text: 'NLU Sync In Progress', type: 'info', time: 120000 })\r\n\r\n        await provider.sync()\r\n\r\n        bp.events.emit('toast.nlu-sync', { text: 'NLU Sync Success', type: 'success' })\r\n        res.sendStatus(200)\r\n      } catch (e) {\r\n        bp.events.emit('toast.nlu-sync', { text: `NLU Sync Error: ${e.name} : ${e.message}`, type: 'error' })\r\n        res.status(500).send(`${e.name} : ${e.message}`)\r\n      }\r\n    })\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","module.exports = require(\"bluebird-retry\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"bluebird-retry\"\n// module id = 8\n// module chunks = 0","module.exports = require(\"moment\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"moment\"\n// module id = 9\n// module chunks = 0","import mkdirp from 'mkdirp'\r\nimport path from 'path'\r\nimport _ from 'lodash'\r\nimport Promise from 'bluebird'\r\n\r\nconst formatFilename = name =>\r\n  name\r\n    .toLowerCase()\r\n    .replace(/[^a-z0-9-_.]/gi, '_')\r\n    .replace('.entities.json', '')\r\n    .replace('.entity.json', '')\r\n    .replace('.json', '')\r\n    .replace('.utterances.txt', '')\r\n\r\nexport default class Storage {\r\n  constructor({ bp, config, provider }) {\r\n    this.ghost = bp.ghostManager\r\n    this.intentsDir = config.intentsDir\r\n    this.entitiesDir = config.entitiesDir\r\n    this.projectDir = bp.projectLocation\r\n    this.provider = provider\r\n  }\r\n\r\n  async initializeGhost() {\r\n    mkdirp.sync(path.resolve(this.projectDir, this.intentsDir))\r\n    mkdirp.sync(path.resolve(this.projectDir, this.entitiesDir))\r\n\r\n    await this.ghost.addRootFolder(this.intentsDir, { filesGlob: '**/*.*' })\r\n    await this.ghost.addRootFolder(this.entitiesDir, { filesGlob: '**/*.entity.json' })\r\n  }\r\n\r\n  async saveIntent(intent, content) {\r\n    intent = formatFilename(intent)\r\n\r\n    if (intent.length < 1) {\r\n      throw new Error('Invalid intent name, expected at least one character')\r\n    }\r\n\r\n    const utterancesFile = `${intent}.utterances.txt`\r\n    const propertiesFile = `${intent}.json`\r\n\r\n    const utterances = content.utterances.join('\\r\\n') // \\n To support windows as well\r\n\r\n    await this.ghost.upsertFile(this.intentsDir, utterancesFile, utterances)\r\n    await this.ghost.upsertFile(\r\n      this.intentsDir,\r\n      propertiesFile,\r\n      JSON.stringify({\r\n        entities: content.entities\r\n      })\r\n    )\r\n  }\r\n\r\n  async deleteIntent(intent) {\r\n    intent = formatFilename(intent)\r\n\r\n    if (intent.length < 1) {\r\n      throw new Error('Invalid intent name, expected at least one character')\r\n    }\r\n\r\n    const utterancesFile = `${intent}.utterances.txt`\r\n    const propertiesFile = `${intent}.json`\r\n\r\n    try {\r\n      await this.ghost.deleteFile(this.intentsDir, utterancesFile)\r\n    } catch (e) {\r\n      if (e.code !== 'ENOENT' && !e.message.includes(\"couldn't find it\")) {\r\n        throw e\r\n      }\r\n    }\r\n\r\n    try {\r\n      await this.ghost.deleteFile(this.intentsDir, propertiesFile)\r\n    } catch (e) {\r\n      if (e.code !== 'ENOENT' && !e.message.includes(\"couldn't find it\")) {\r\n        throw e\r\n      }\r\n    }\r\n  }\r\n\r\n  async getIntents() {\r\n    const intents = await this.ghost.directoryListing(this.intentsDir, '.json')\r\n    return Promise.mapSeries(intents, intent => this.getIntent(intent))\r\n  }\r\n\r\n  async getIntent(intent) {\r\n    intent = formatFilename(intent)\r\n\r\n    if (intent.length < 1) {\r\n      throw new Error('Invalid intent name, expected at least one character')\r\n    }\r\n\r\n    const filename = `${intent}.json`\r\n\r\n    const propertiesContent = await this.ghost.readFile(this.intentsDir, filename)\r\n    const utterancesContent = await this.ghost.readFile(this.intentsDir, filename.replace('.json', '.utterances.txt'))\r\n\r\n    const utterances = _.split(utterancesContent, /\\r|\\r\\n|\\n/i).filter(x => x.length)\r\n    const properties = JSON.parse(propertiesContent)\r\n\r\n    return {\r\n      name: intent,\r\n      filename: filename,\r\n      utterances: utterances,\r\n      ...properties\r\n    }\r\n  }\r\n\r\n  async getCustomEntities() {\r\n    const entities = await this.ghost.directoryListing(this.entitiesDir, '.json')\r\n\r\n    return Promise.mapSeries(entities, entity => this.getCustomEntity(entity))\r\n  }\r\n\r\n  async getCustomEntity(entity) {\r\n    entity = formatFilename(entity)\r\n\r\n    if (entity.length < 1) {\r\n      throw new Error('Invalid entity name, expected at least one character')\r\n    }\r\n\r\n    const filename = `${entity}.entity.json`\r\n\r\n    const definitionContent = await this.ghost.readFile(this.entitiesDir, filename)\r\n    const definition = JSON.parse(definitionContent)\r\n\r\n    return {\r\n      name: entity,\r\n      definition: definition\r\n    }\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/storage.js","module.exports = require(\"mkdirp\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"mkdirp\"\n// module id = 11\n// module chunks = 0","module.exports = require(\"path\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"path\"\n// module id = 12\n// module chunks = 0","import _ from 'lodash'\r\n\r\nexport default class Parser {\r\n  constructor() {}\r\n\r\n  extractLabelsFromCanonical(canonicalUtterance, intentEntities) {\r\n    const labels = []\r\n    let plainText = ''\r\n\r\n    const regex = /\\[(.+?)]\\((.+?)\\)/g\r\n    let m\r\n    let i = 0\r\n\r\n    do {\r\n      m = regex.exec(canonicalUtterance)\r\n      if (m) {\r\n        plainText += canonicalUtterance.substr(i, m.index - i)\r\n        i = m.index + m[0].length\r\n        plainText += m[1]\r\n        labels.push({\r\n          start: plainText.length - m[1].length,\r\n          end: plainText.length - 1,\r\n          entityName: m[2],\r\n          type: _.get(_.find(intentEntities, { name: m[2] }), 'type')\r\n        })\r\n      }\r\n    } while (m)\r\n\r\n    plainText += canonicalUtterance.substr(i, canonicalUtterance.length - i)\r\n\r\n    return {\r\n      text: plainText,\r\n      labels: labels\r\n    }\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/parser.js","import _ from 'lodash'\r\nimport crypto from 'crypto'\r\n\r\nimport Provider from './base'\r\n\r\nexport default class DialogflowProvider extends Provider {\r\n  constructor(config) {\r\n    super({\r\n      ...config,\r\n      name: 'dialogflow',\r\n      entityKey: '@dialogflow'\r\n    })\r\n\r\n    this.projectId = this.config.googleProjectId\r\n\r\n    // TODO: get rid of eval once we drop webpack for node-part (needed to overcome webpack compilation)\r\n    const dialogflow = require('dialogflow').v2 // eslint-disable-line no-eval\r\n\r\n    this.agentClient = new dialogflow.AgentsClient()\r\n    this.sessionClient = new dialogflow.SessionsClient()\r\n    this.contextClient = new dialogflow.ContextsClient()\r\n  }\r\n\r\n  _getSessionId(event) {\r\n    let shortUserId = _.get(event, 'user.id') || ''\r\n    if (shortUserId.length > 36) {\r\n      shortUserId = crypto\r\n        .createHash('md5')\r\n        .update(shortUserId)\r\n        .digest('hex')\r\n    }\r\n    return shortUserId\r\n  }\r\n\r\n  _resolveEntity(field) {\r\n    const entity = field[field.kind]\r\n\r\n    if (field.kind === 'stringValue' || field.kind === 'numberValue') {\r\n      return entity\r\n    } else if (field.kind === 'listValue') {\r\n      return entity.values.map(v => this._resolveEntity(v))\r\n    } else if (field.kind === 'structValue') {\r\n      return _.mapValues(entity.fields, f => this._resolveEntity(f))\r\n    } else {\r\n      throw new Error('Not supported')\r\n    }\r\n  }\r\n\r\n  /*******\r\n  Public API\r\n  *******/\r\n\r\n  async init() {\r\n    const [agent] = await this.agentClient.getAgent({\r\n      parent: this.agentClient.projectPath(this.projectId)\r\n    })\r\n    this.agent = agent\r\n  }\r\n\r\n  async sync() {\r\n    throw new Error('Not implemented')\r\n  }\r\n\r\n  async checkSyncNeeded() {\r\n    return false // Not implemented yet\r\n  }\r\n\r\n  async extract(event) {\r\n\r\n    const request = {\r\n      session: this.sessionClient.sessionPath(this.projectId, this._getSessionId(event)),\r\n      queryInput: {\r\n        text: {\r\n          //TODO Find a way to pass node and flow as context?\r\n          text: event.text,\r\n          languageCode: this.agent.defaultLanguageCode\r\n        }\r\n\t  },\r\n\t  queryParams: {\r\n\t\tsentimentAnalysisRequestConfig: {\r\n\t\t  analyzeQueryTextSentiment: true,\r\n\t\t},\r\n\t  },\r\n    }\r\n\tconst detection = await this.sessionClient.detectIntent(request)\r\n\r\n    const {\r\n      queryResult\r\n    } = detection[0]\r\n\r\n    const isSmallTalk = queryResult.action.startsWith('smalltalk')\r\n\r\n    const intent = {\r\n      name: isSmallTalk ? queryResult.action : queryResult.intent && queryResult.intent.displayName,\r\n      isSmallTalk,\r\n      confidence: queryResult.intentDetectionConfidence,\r\n      provider: 'dialogflow'\r\n    }\r\n    const entities = _.map(queryResult.parameters.fields, (v, k) => ({\r\n      name: k,\r\n      value: this._resolveEntity(v)\r\n    }))\r\n\r\n    const context = {\r\n      add: (event, name, lifespan) => {\r\n\r\n        const sessionPath = this.contextClient.sessionPath(this.projectId, this._getSessionId(event));\r\n\r\n        const contextPath = this.contextClient.contextPath(\r\n          this.projectId,\r\n          this._getSessionId(event),\r\n          name\r\n        );\r\n\r\n        const createContextRequest = {\r\n          parent: sessionPath,\r\n          context: {\r\n            name: contextPath,\r\n            lifespanCount: lifespan\r\n          }\r\n        };\r\n\r\n        return this.contextClient.createContext(createContextRequest);\r\n      }\r\n\t}\r\n\r\n\tevent.bp.logger.debug(`Dialogflow: [NLU] \"${event.text}\"\\t\\t?> ITNT\\t\"${intent.name}\" (${intent.confidence.toFixed(2)})`)\r\n\r\n    return {\r\n      intent,\r\n      context,\r\n      intents: [intent],\r\n      original: detection,\r\n      entities: entities.map(entity => ({\r\n        name: entity.name, // usually the entity name, but can be modified\r\n        type: entity.name, // when parameter name modified dialogflow doesn't give the original entity name\r\n        value: entity.value,\r\n        original: null,\r\n        confidence: null,\r\n        position: null,\r\n        provider: 'dialogflow'\r\n      }))\r\n    }\r\n  }\r\n\r\n  async getCustomEntities() {\r\n    return [] // Not implemented yet\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/dialogflow.js","module.exports = require(\"dialogflow\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"dialogflow\"\n// module id = 15\n// module chunks = 0","import axios from 'axios'\r\nimport _ from 'lodash'\r\nimport crypto from 'crypto'\r\nimport Promise from 'bluebird'\r\n\r\nimport Provider, { defaultExtractData } from './base'\r\nimport Entities from './entities'\r\n\r\nconst LUIS_APP_VERSION = '1.0' // Static, we're not using this as everything is source-controlled in your bot\r\nconst LUIS_HASH_KVS_KEY = 'nlu/luis/updateMetadata'\r\n\r\nexport default class LuisProvider extends Provider {\r\n  constructor(config) {\r\n    super({ ...config, name: 'luis', entityKey: '@luis' })\r\n\r\n    this.appId = this.config.luisAppId\r\n    this.programmaticKey = this.config.luisProgrammaticKey\r\n    this.appSecret = this.config.luisAppSecret\r\n    this.appRegion = this.config.luisAppRegion\r\n  }\r\n\r\n  async init() {}\r\n\r\n  async getRemoteVersion() {\r\n    try {\r\n      const res = await axios.get(\r\n        `https://${this.appRegion}.api.cognitive.microsoft.com/luis/api/v2.0/apps/${this.appId}/versions`,\r\n        {\r\n          headers: {\r\n            'Ocp-Apim-Subscription-Key': this.programmaticKey\r\n          }\r\n        }\r\n      )\r\n\r\n      return _.find(res.data, { version: LUIS_APP_VERSION })\r\n    } catch (err) {\r\n      this.logger.debug('[NLU::Luis] Could not fetch app versions')\r\n      return []\r\n    }\r\n  }\r\n\r\n  async deleteVersion() {\r\n    try {\r\n      const del = await axios.delete(\r\n        `https://${this.appRegion}.api.cognitive.microsoft.com/luis/api/v2.0/apps/${this\r\n          .appId}/versions/${LUIS_APP_VERSION}/`,\r\n        {\r\n          headers: {\r\n            'Ocp-Apim-Subscription-Key': this.programmaticKey\r\n          }\r\n        }\r\n      )\r\n\r\n      if (del.statusCode === 200) {\r\n        this.logger.debug('[NLU::Luis] Removed old version of the model')\r\n      }\r\n    } catch (err) {\r\n      this.logger.debug('[NLU::Luis] Could not remove old version of the model')\r\n    }\r\n  }\r\n\r\n  async getAppInfo() {\r\n    try {\r\n      const response = await axios.get(\r\n        `https://${this.appRegion}.api.cognitive.microsoft.com/luis/api/v2.0/apps/${this.appId}`,\r\n        {\r\n          headers: {\r\n            'Ocp-Apim-Subscription-Key': this.programmaticKey\r\n          }\r\n        }\r\n      )\r\n      return response.data\r\n    } catch (err) {\r\n      throw new Error('[NLU::Luis] Could not find app ' + this.appId)\r\n    }\r\n  }\r\n\r\n  async isInSync(localIntents, remoteVersion) {\r\n    const intentsHash = crypto\r\n      .createHash('md5')\r\n      .update(JSON.stringify(localIntents))\r\n      .digest('hex')\r\n\r\n    const metadata = await this.kvs.get(LUIS_HASH_KVS_KEY)\r\n\r\n    return metadata && metadata.hash === intentsHash && metadata.time === remoteVersion.lastModifiedDateTime\r\n  }\r\n\r\n  async checkSyncNeeded() {\r\n    const intents = await this.storage.getIntents()\r\n    const currentVersion = await this.getRemoteVersion()\r\n    return !await this.isInSync(intents, currentVersion)\r\n  }\r\n\r\n  async onSyncSuccess(localIntents, remoteVersion) {\r\n    const intentsHash = crypto\r\n      .createHash('md5')\r\n      .update(JSON.stringify(localIntents))\r\n      .digest('hex')\r\n\r\n    await this.kvs.set(LUIS_HASH_KVS_KEY, {\r\n      hash: intentsHash,\r\n      time: remoteVersion.lastModifiedDateTime\r\n    })\r\n  }\r\n\r\n  async getCustomEntities() {\r\n    const { simples, composites, lists } = await this.getCustomLuisEntities()\r\n\r\n    const mapToType = (list, type) =>\r\n      list.map(x => ({\r\n        name: '@custom.' + x.name,\r\n        isFromProvider: false,\r\n        nameProvider: x.name,\r\n        providerType: type,\r\n        definition: x\r\n      }))\r\n\r\n    return [\r\n      ...mapToType(simples, 'entities'),\r\n      ...mapToType(composites, 'composites'),\r\n      ...mapToType(lists, 'closedLists')\r\n    ]\r\n  }\r\n\r\n  async getCustomLuisEntities() {\r\n    const entities = await this.storage.getCustomEntities()\r\n\r\n    const simplesDef = _.find(entities, e => e.name.toLowerCase() === 'luis_entities')\r\n    const compositesDef = _.find(entities, e => e.name.toLowerCase() === 'luis_composites')\r\n    const listsDef = _.find(entities, e => e.name.toLowerCase() === 'luis_closedlists')\r\n\r\n    const simples = (simplesDef && simplesDef.definition) || []\r\n    const composites = (compositesDef && compositesDef.definition) || []\r\n    const lists = (listsDef && listsDef.definition) || []\r\n\r\n    return { simples, composites, lists }\r\n  }\r\n\r\n  validateCredentials() {\r\n    const missingPattern = name =>\r\n      '[NLU::LUIS] \"' +\r\n      name +\r\n      '\" is missing from the configuration, please have a look at botpress-nlu ' +\r\n      'documentation to learn how to setup the credentials.'\r\n\r\n    if (_.isEmpty(this.appId)) {\r\n      throw new Error(missingPattern('Application Id'))\r\n    }\r\n\r\n    if (_.isEmpty(this.programmaticKey)) {\r\n      throw new Error(missingPattern('Programmatic Key'))\r\n    }\r\n\r\n    if (_.isEmpty(this.appId)) {\r\n      throw new Error(missingPattern('Application Secret'))\r\n    }\r\n\r\n    if (_.isEmpty(this.appId)) {\r\n      throw new Error(missingPattern('Application Region'))\r\n    }\r\n  }\r\n\r\n  async sync() {\r\n    if (this.syncingSince && new Date() - this.syncingSince <= 10 * 60 * 1000) {\r\n      this.logger.warn('[NLU::Luis] Tried to sync while syncing in progress')\r\n      return\r\n    }\r\n\r\n    this.syncingSince = new Date()\r\n\r\n    this.validateCredentials()\r\n\r\n    const intents = await this.storage.getIntents()\r\n    let currentVersion = await this.getRemoteVersion()\r\n\r\n    if (await this.isInSync(intents, currentVersion)) {\r\n      this.logger.debug('[NLU::Luis] Model is up to date')\r\n      return\r\n    } else {\r\n      this.logger.debug('[NLU::Luis] The model needs to be updated')\r\n    }\r\n\r\n    if (currentVersion) {\r\n      this.logger.debug('[NLU::Luis] Deleting old version of the model')\r\n      await this.deleteVersion()\r\n    }\r\n\r\n    const utterances = []\r\n\r\n    const builtinEntities = []\r\n    const simpleEntities = []\r\n    const compositeEntities = []\r\n    const listEntities = []\r\n\r\n    const availableEntities = await this.getAvailableEntities()\r\n\r\n    intents.forEach(intent => {\r\n      intent.utterances.forEach(utterance => {\r\n        const extracted = this.parser.extractLabelsFromCanonical(utterance, intent.entities)\r\n        if (!extracted.text || !extracted.text.trim()) {\r\n          return\r\n        }\r\n\r\n        const entities = []\r\n\r\n        extracted.labels.forEach(label => {\r\n          const entity = _.find(availableEntities, { name: label.type })\r\n\r\n          if (!entity) {\r\n            throw new Error('[NLU::Luis] Unknown entity: ' + label.type)\r\n          }\r\n\r\n          if (entity.isFromProvider && builtinEntities.indexOf(entity.nameProvider) === -1) {\r\n            builtinEntities.push(entity.nameProvider)\r\n          } else if (entity.providerType === 'entities' && !_.find(simpleEntities, { name: entity.nameProvider })) {\r\n            simpleEntities.push(entity.definition)\r\n          } else if (\r\n            entity.providerType === 'composites' &&\r\n            !_.find(compositeEntities, { name: entity.nameProvider })\r\n          ) {\r\n            compositeEntities.push(entity.definition)\r\n          } else if (entity.providerType === 'closedLists' && !_.find(listEntities, { name: entity.nameProvider })) {\r\n            listEntities.push(entity.definition)\r\n          }\r\n\r\n          entities.push({\r\n            entity: entity.nameProvider,\r\n            startPos: label.start,\r\n            endPos: label.end\r\n          })\r\n        })\r\n\r\n        utterances.push({\r\n          text: extracted.text,\r\n          intent: intent.name,\r\n          entities: entities\r\n        })\r\n      })\r\n    })\r\n\r\n    const appInfo = await this.getAppInfo()\r\n\r\n    const body = {\r\n      luis_schema_version: '2.1.0',\r\n      versionId: LUIS_APP_VERSION,\r\n      name: appInfo.name,\r\n      desc: appInfo.description,\r\n      culture: appInfo.culture,\r\n      intents: intents.map(i => ({ name: i.name })),\r\n      entities: simpleEntities,\r\n      composites: compositeEntities,\r\n      closedLists: listEntities,\r\n      bing_entities: builtinEntities,\r\n      model_features: [],\r\n      regex_features: [],\r\n      utterances: utterances\r\n    }\r\n\r\n    try {\r\n      const result = await axios.post(\r\n        `https://${this.appRegion}.api.cognitive.microsoft.com/luis/api/v2.0/apps/${this\r\n          .appId}/versions/import?versionId=${LUIS_APP_VERSION}`,\r\n        body,\r\n        {\r\n          headers: {\r\n            'Ocp-Apim-Subscription-Key': this.programmaticKey\r\n          }\r\n        }\r\n      )\r\n\r\n      await this.train()\r\n\r\n      currentVersion = await this.getRemoteVersion()\r\n      await this.onSyncSuccess(intents, currentVersion)\r\n\r\n      this.logger.info('[NLU::Luis] Synced model [' + result.data + ']')\r\n    } catch (err) {\r\n      const detailedError = _.get(err, 'response.data.error.message') || (err && err.message) || err\r\n      this.logger.error('[NLU::Luis] Could not sync the model. Error = ' + detailedError)\r\n    }\r\n    this.syncingSince = null\r\n  }\r\n\r\n  async train() {\r\n    let res = await axios.post(\r\n      `https://${this.appRegion}.api.cognitive.microsoft.com/luis/api/v2.0/apps/${this\r\n        .appId}/versions/${LUIS_APP_VERSION}/train`,\r\n      {},\r\n      {\r\n        headers: {\r\n          'Ocp-Apim-Subscription-Key': this.programmaticKey\r\n        }\r\n      }\r\n    )\r\n\r\n    if (res.data.status !== 'Queued') {\r\n      throw new Error('Expected training to be Queued but was: ' + res.data.status)\r\n    }\r\n\r\n    while (true) {\r\n      res = await axios.get(\r\n        `https://${this.appRegion}.api.cognitive.microsoft.com/luis/api/v2.0/apps/${this\r\n          .appId}/versions/${LUIS_APP_VERSION}/train`,\r\n        {\r\n          headers: {\r\n            'Ocp-Apim-Subscription-Key': this.programmaticKey\r\n          }\r\n        }\r\n      )\r\n\r\n      const models = res.data\r\n\r\n      const percent = _.filter(models, m => m.details.status === 'Success').length / models.length\r\n\r\n      const error = _.find(models, m => m.details.status === 'Fail')\r\n\r\n      if (error) {\r\n        throw new Error(\r\n          `[NLU::Luis] Error training model \"${error.modelId}\", reason is \"${error.details.failureReason}\"`\r\n        )\r\n      }\r\n\r\n      if (percent >= 1) {\r\n        this.logger.debug('[NLU::Luis] Model trained (100%)')\r\n        break\r\n      } else {\r\n        this.logger.debug('[NLU::Luis] Training... ' + percent.toFixed(2) * 100 + '%')\r\n      }\r\n\r\n      await Promise.delay(1000)\r\n    }\r\n\r\n    await Promise.delay(1000)\r\n\r\n    await axios.post(\r\n      `https://${this.appRegion}.api.cognitive.microsoft.com/luis/api/v2.0/apps/${this.appId}/publish`,\r\n      {\r\n        versionId: LUIS_APP_VERSION,\r\n        isStaging: !this.isProduction,\r\n        region: this.appRegion\r\n      },\r\n      {\r\n        headers: {\r\n          'Ocp-Apim-Subscription-Key': this.programmaticKey\r\n        }\r\n      }\r\n    )\r\n  }\r\n\r\n  async extract(incomingEvent) {\r\n    try {\r\n      this.validateCredentials()\r\n    } catch (err) {\r\n      this.logger.warn(\r\n        '[NLU::Luis] Did not extract NLU metadata for incoming text because Luis is not configured properly.'\r\n      )\r\n\r\n      return defaultExtractData('luis')\r\n    }\r\n\r\n    const res = await axios.get(`https://${this.appRegion}.api.cognitive.microsoft.com/luis/v2.0/apps/${this.appId}`, {\r\n      params: {\r\n        q: incomingEvent.text,\r\n        verbose: true,\r\n        spellCheck: false,\r\n        staging: !this.isProduction\r\n      },\r\n      headers: {\r\n        'Ocp-Apim-Subscription-Key': this.appSecret\r\n      }\r\n    })\r\n\r\n    const intentName = _.get(res, 'data.topScoringIntent.intent') || 'None'\r\n    const confidence = _.get(res, 'data.topScoringIntent.score') || 0\r\n    const intents = _.get(res, 'data.intents') || []\r\n    const entities = _.get(res, 'data.entities') || []\r\n\r\n    return {\r\n      intent: {\r\n        name: intentName,\r\n        confidence: parseFloat(confidence),\r\n        provider: 'luis'\r\n      },\r\n      intents: intents.map(intent => ({\r\n        name: intent.intent,\r\n        confidence: parseFloat(intent.score),\r\n        provider: 'luis'\r\n      })),\r\n      entities: entities.map(entity => ({\r\n        name: null,\r\n        type: entity.type,\r\n        value:\r\n          _.get(entity, 'resolution.values.0.value') ||\r\n          _.get(entity, 'resolution.value') ||\r\n          _.get(entity, 'resolution.values.0') ||\r\n          entity.entity,\r\n        unit: _.get(entity, 'resolution.unit'),\r\n        original: entity.entity,\r\n        confidence: null,\r\n        position: entity.startIndex,\r\n        provider: 'luis'\r\n      }))\r\n    }\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/luis.js","import axios from 'axios'\r\nimport _ from 'lodash'\r\nimport crypto from 'crypto'\r\nimport Promise from 'bluebird'\r\nimport ms from 'ms'\r\n\r\nimport Provider, { defaultExtractData } from './base'\r\nimport Entities from './entities'\r\n\r\nconst RASA_HASH_KVS_KEY = 'nlu/rasa/updateMetadata'\r\n\r\nexport default class RasaProvider extends Provider {\r\n  constructor(config) {\r\n    super({ ...config, name: 'rasa', entityKey: '@rasa' })\r\n\r\n    this.endpoint = this.config.rasaEndpoint\r\n    this.token = this.config.rasaToken\r\n    this.project = this.config.rasaProject\r\n\r\n    this.client = axios.create({\r\n      baseURL: this.endpoint,\r\n      params: this.token && this.token.length ? { token: this.token } : {}\r\n    })\r\n  }\r\n\r\n  async init() {}\r\n\r\n  async checkSyncNeeded() {\r\n    const intents = await this.storage.getIntents()\r\n    const remoteVersions = await this._getRemoteVersions()\r\n    return !await this._isInSync(intents, remoteVersions)\r\n  }\r\n\r\n  _getProjectName() {\r\n    const scope = 'all'\r\n    return `${this.env}__${this.project}__${scope}`\r\n  }\r\n\r\n  async _getRemoteVersions() {\r\n    try {\r\n      const projectName = this._getProjectName()\r\n      const res = await this.client.get('/status')\r\n      const versions = _.get(res, 'data.available_projects.' + projectName + '.available_models') || []\r\n      return versions\r\n    } catch (err) {\r\n      this.logger.debug('[NLU::Rasa] Could not fetch model versions')\r\n      return []\r\n    }\r\n  }\r\n\r\n  async _isInSync(localIntents, remoteVersions) {\r\n    const intentsHash = crypto\r\n      .createHash('md5')\r\n      .update(JSON.stringify(localIntents))\r\n      .digest('hex')\r\n\r\n    const metadata = await this.kvs.get(RASA_HASH_KVS_KEY)\r\n\r\n    return metadata && metadata.hash === intentsHash && _.includes(remoteVersions, metadata.modelId)\r\n  }\r\n\r\n  async _onSyncSuccess(localIntents) {\r\n    const intentsHash = crypto\r\n      .createHash('md5')\r\n      .update(JSON.stringify(localIntents))\r\n      .digest('hex')\r\n\r\n    const versions = await this._getRemoteVersions()\r\n\r\n    const version = _.last(_.sortBy(versions))\r\n\r\n    if (!version) {\r\n      throw new Error('[NLU::Rasa] Could not sync model, could not list project models after training')\r\n    }\r\n\r\n    await this.kvs.set(RASA_HASH_KVS_KEY, {\r\n      hash: intentsHash,\r\n      modelId: version\r\n    })\r\n  }\r\n\r\n  async _cacheLatestModel() {\r\n    const metadata = await this.kvs.get(RASA_HASH_KVS_KEY)\r\n    if (!metadata) {\r\n      throw new Error('[NLU::Rasa] Could not fetch cached model: please make sure syncing succeeded first')\r\n    }\r\n    this._modelId = metadata.modelId\r\n    return metadata.modelId\r\n  }\r\n\r\n  async getCustomEntities() {\r\n    // RASA doesn't support custom entity types (version 0.10 as of writing)\r\n    return []\r\n  }\r\n\r\n  async sync() {\r\n    const intents = await this.storage.getIntents()\r\n    const remoteVersions = await this._getRemoteVersions()\r\n\r\n    if (await this._isInSync(intents, remoteVersions)) {\r\n      this.logger.debug('[NLU::Rasa] Model is up to date')\r\n      return\r\n    } else {\r\n      this.logger.debug('[NLU::Rasa] The model needs to be updated')\r\n    }\r\n\r\n    const sample = {\r\n      rasa_nlu_data: {\r\n        common_examples: [],\r\n        regex_features: [],\r\n        entity_synonyms: []\r\n      }\r\n    }\r\n\r\n    const common_examples = []\r\n\r\n    intents.forEach(intent => {\r\n      intent.utterances.forEach(utterance => {\r\n        const extracted = this.parser.extractLabelsFromCanonical(utterance, intent.entities)\r\n        const entities = []\r\n\r\n        extracted.labels.forEach(label => {\r\n          entities.push({\r\n            entity: label.entityName,\r\n            value: extracted.text.substr(label.start, label.end - label.start + 1),\r\n            start: label.start,\r\n            end: label.end + 1\r\n          })\r\n        })\r\n\r\n        common_examples.push({\r\n          text: extracted.text,\r\n          intent: intent.name,\r\n          entities: entities\r\n        })\r\n      })\r\n    })\r\n\r\n    if (this._training) {\r\n      return this.logger.warn('[NLU::Rasa] Training is already in progress, aborting this request')\r\n    } else {\r\n      this._training = true\r\n      this.logger.debug(`[NLU::Rasa] Started training model from ${common_examples.length} samples`)\r\n    }\r\n\r\n    try {\r\n      await this.client.post(\r\n        '/train',\r\n        {\r\n          rasa_nlu_data: {\r\n            common_examples: common_examples,\r\n            regex_features: [], // TODO Implement that\r\n            entity_synonyms: []\r\n          }\r\n        },\r\n        {\r\n          timeout: ms('30m'),\r\n          params: {\r\n            project: this._getProjectName()\r\n          }\r\n        }\r\n      )\r\n    } catch (err) {\r\n      this._training = false\r\n\r\n      const data = _.get(err, 'response.data')\r\n      const msg = `\"${data && JSON.stringify(data)}\" Status: ${err.status} | Message: ${err.message}`\r\n\r\n      if (err.status == 403) {\r\n        const errorMsg = `[NLU::Rasa] A model is already training, aborting sync: ${msg}`\r\n\r\n        this.logger.warn(errorMsg)\r\n        throw new Error(errorMsg)\r\n      }\r\n\r\n      if (err.status == 404) {\r\n        const errorMsg = `[NLU::Rasa] Invalid project error: ${msg}`\r\n\r\n        this.logger.warn(errorMsg)\r\n        throw new Error(errorMsg)\r\n      }\r\n\r\n      if (err.status == 500) {\r\n        const errorMsg = `[NLU::Rasa] Training error: ${msg}`\r\n\r\n        this.logger.warn(errorMsg)\r\n        throw new Error(errorMsg)\r\n      }\r\n\r\n      const errorMsg = `[NLU::Rasa] Error syncing model: ${msg}`\r\n\r\n      this.logger.error(errorMsg)\r\n      throw new Error(errorMsg)\r\n    }\r\n\r\n    this._training = false\r\n\r\n    await this._onSyncSuccess(intents)\r\n\r\n    const latestModel = await this._cacheLatestModel()\r\n\r\n    this.logger.info(`[NLU::Rasa] Synced model [Model=${latestModel}]`)\r\n  }\r\n\r\n  async extract(incomingEvent) {\r\n    let modelId = this._modelId\r\n\r\n    if (!modelId) {\r\n      modelId = await this._cacheLatestModel()\r\n    }\r\n\r\n    if (!modelId) {\r\n      const versions = await this._getRemoteVersions()\r\n\r\n      if (!versions.length) {\r\n        this.sync() // Async\r\n        this.logger.error(\r\n          '[NLU:Rasa] Your model needs to be trained at least once in this environment before extraction can be done'\r\n        )\r\n\r\n        return defaultExtractData('rasa')\r\n      }\r\n\r\n      this._modelId = modelId = _.last(_.sortBy(versions))\r\n      this.logger.warn(\r\n        '[NLU:Rasa] Model not specified, using latest one. Retrain in this environment to fix this warning.'\r\n      )\r\n\r\n      return defaultExtractData('rasa')\r\n    }\r\n\r\n    const res = await this.client.post('/parse', {\r\n      q: incomingEvent.text,\r\n      project: this._getProjectName(),\r\n      model: modelId\r\n    })\r\n\r\n    const intentName = _.get(res, 'data.intent.name') || 'None'\r\n    const confidence = _.get(res, 'data.intent.confidence') || 0\r\n    const intents = _.get(res, 'data.intent_ranking') || []\r\n    const entities = _.get(res, 'data.entities') || []\r\n\r\n    return {\r\n      intent: {\r\n        name: intentName,\r\n        confidence: parseFloat(confidence),\r\n        provider: 'rasa'\r\n      },\r\n      intents: intents.map(intent => ({\r\n        name: intent.name,\r\n        confidence: parseFloat(intent.confidence),\r\n        provider: 'rasa'\r\n      })),\r\n      entities: entities.map(entity => ({\r\n        name: null,\r\n        type: entity.entity,\r\n        value: entity.value,\r\n        original: entity.text,\r\n        confidence: null,\r\n        position: entity.start,\r\n        provider: entity.extractor\r\n      }))\r\n    }\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/rasa.js","module.exports = require(\"ms\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ms\"\n// module id = 18\n// module chunks = 0","import _ from 'lodash'\r\nimport axios from 'axios'\r\nimport crypto from 'crypto'\r\nimport Promise from 'bluebird'\r\n\r\nimport Provider from './base'\r\n\r\nconst RECAST_HASH_KVS_KEY = 'nlu/recast/updateMetadata'\r\n\r\nexport default class RecastProvider extends Provider {\r\n  constructor(config) {\r\n    super({ ...config, name: 'recast', entityKey: '@recast' })\r\n\r\n    this.endpoint = `/users/${this.config.recastUserSlug}/bots/${this.config.recastBotSlug}`\r\n\r\n    this.client = axios.create({\r\n      baseURL: 'https://api.recast.ai/v2',\r\n      headers: { Authorization: `Token ${this.config.recastToken}` }\r\n    })\r\n  }\r\n\r\n  _getBotModel() {\r\n    return this.client.get(`${this.endpoint}`)\r\n  }\r\n\r\n  _getBulkCreations() {\r\n    return this.client.get(`${this.endpoint}/bulk_creations`)\r\n  }\r\n\r\n  _getRemoteIntents() {\r\n    return this.client.get(`${this.endpoint}/intents`)\r\n  }\r\n\r\n  _deleteIntent(intentSlug) {\r\n    return this.client.delete(`${this.endpoint}/intents/${intentSlug}`)\r\n  }\r\n\r\n  _postIntent(intent) {\r\n    return this.client.post(`${this.endpoint}/intents`, intent)\r\n  }\r\n\r\n  _getRemoteIntentExpressions(intentSlug) {\r\n    return this.client.get(`${this.endpoint}/intents/${intentSlug}/expressions`)\r\n  }\r\n\r\n  _getRemoteExpression(intentSlug, expressionId) {\r\n    return this.client.get(`${this.endpoint}/intents/${intentSlug}/expressions/${expressionId}`)\r\n  }\r\n\r\n  _updateRemoteExpression(intentSlug, expressionId, expression) {\r\n    return this.client.put(`${this.endpoint}/intents/${intentSlug}/expressions/${expressionId}`, expression)\r\n  }\r\n\r\n  _getRemoteGazettes() {\r\n    return this.client.get(`${this.endpoint}/gazettes`)\r\n  }\r\n\r\n  _deleteGazette(gazetteSlug) {\r\n    return this.client.delete(`${this.endpoint}/gazettes/${gazetteSlug}`)\r\n  }\r\n\r\n  async _postGazette(entity) {\r\n    try {\r\n      await this.client.post(`/entities`, { name: entity.entity_id })\r\n    } catch (err) {\r\n      // Entities names on recast are shared, so it's not really an error\r\n      if (err.response.data.message !== 'Entity has already been taken') {\r\n        this.syncing = false\r\n        throw new Error(err.response.data.message)\r\n      }\r\n    }\r\n\r\n    return this.client.post(`${this.endpoint}/gazettes`, entity)\r\n  }\r\n\r\n  async _getIntentsHash() {\r\n    const localIntents = await this.storage.getIntents()\r\n\r\n    return crypto\r\n      .createHash('md5')\r\n      .update(JSON.stringify(localIntents))\r\n      .digest('hex')\r\n  }\r\n\r\n  async _onSyncSuccess() {\r\n    const intentsHash = await this._getIntentsHash()\r\n\r\n    await this.kvs.set(RECAST_HASH_KVS_KEY, intentsHash)\r\n    this.syncing = false\r\n  }\r\n\r\n  /*******\r\n  Public API\r\n  *******/\r\n\r\n  async init() {\r\n    const { data: { results } } = await this._getBotModel()\r\n    this.defaultLanguage = results.language.isocode\r\n  }\r\n\r\n  async sync() {\r\n    if (this.syncing) {\r\n      this.logger.warn('[NLU::Recast] Model is already syncing !')\r\n      return\r\n    }\r\n\r\n    this.syncing = true\r\n    this.logger.debug('[NLU::Recast] Syncing Model...')\r\n\r\n    try {\r\n      // Delete all gazettes\r\n      let { data: { results: remoteGazettes } } = await this._getRemoteGazettes()\r\n\r\n      for (const e of _.map(remoteGazettes, 'slug')) {\r\n        await this._deleteGazette(e)\r\n      }\r\n\r\n      // Create entities and gazettes\r\n      const customEntities = await this.getCustomEntities()\r\n      remoteGazettes = []\r\n\r\n      for (const e of customEntities) {\r\n        const { data: { results: remoteGazette } } = await this._postGazette(e.definition)\r\n        remoteGazettes.push(_.pick(remoteGazette, ['slug', 'entity.id']))\r\n      }\r\n\r\n      // Delete then create intents and update expressions with entities\r\n      const localIntents = await this.storage.getIntents()\r\n      const { data: { results: remoteIntents } } = await this._getRemoteIntents()\r\n\r\n      // Delete all intents\r\n      for (const i of _.map(remoteIntents, 'slug')) {\r\n        await this._deleteIntent(i)\r\n      }\r\n\r\n      for (const intent of localIntents) {\r\n        if (intent.utterances.length === 0) {\r\n          this.logger.warn(`[NLU::Recast] Intent ${intent.name} has been skipped because it has no utterances`)\r\n          continue\r\n        }\r\n\r\n        // Post the intent\r\n        const utterances = _.map(intent.utterances, u => this.parser.extractLabelsFromCanonical(u, intent.entities))\r\n        const expressions = _.map(utterances, u => ({\r\n          source: u.text,\r\n          language: { isocode: this.defaultLanguage }\r\n        }))\r\n        await this._postIntent({ name: intent.name, expressions })\r\n\r\n        // Wait for the expressions of the intents to be created\r\n        while (true) {\r\n          const { data: { results } } = await this._getBulkCreations()\r\n\r\n          if (results.length === 0) {\r\n            break\r\n          }\r\n\r\n          await Promise.delay(1000)\r\n        }\r\n\r\n        // Update expressions with entities\r\n        const { data: { results: remoteIntentExpressions } } = await this._getRemoteIntentExpressions(intent.name)\r\n\r\n        for (const expr of remoteIntentExpressions) {\r\n          const utterance = utterances.find(u => u.text === expr.source)\r\n\r\n          if (utterance && utterance.labels.length) {\r\n            const { data: { results: remoteIntentExpression } } = await this._getRemoteExpression(intent.name, expr.id)\r\n\r\n            for (const label of utterance.labels) {\r\n              const word = utterance.text.substr(label.start, label.end - label.start + 1)\r\n              const token = remoteIntentExpression.tokens.find(t => t.word.name === word)\r\n\r\n              if (token && (!token.entity || token.entity.slug !== label.type)) {\r\n                const gazette = remoteGazettes.find(e => e.slug === label.type)\r\n                token.entity = { id: gazette.entity.id }\r\n                const expression = { source: expr.source, tokens: [token] }\r\n                await this._updateRemoteExpression(intent.name, expr.id, expression)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } catch (err) {\r\n      this.syncing = false\r\n      throw new Error(err.response.data.message)\r\n    }\r\n\r\n    await this._onSyncSuccess()\r\n\r\n    this.logger.info('[NLU::Recast] Synced Model')\r\n  }\r\n\r\n  async checkSyncNeeded() {\r\n    const intentsHash = await this._getIntentsHash()\r\n    const savedHash = await this.kvs.get(RECAST_HASH_KVS_KEY)\r\n\r\n    return savedHash !== intentsHash\r\n  }\r\n\r\n  async extract(incomingEvent) {\r\n    const { data: { results } } = await this.client.post('/request', {\r\n      text: incomingEvent.text\r\n    })\r\n\r\n    const intentName = _.get(results.intents[0], 'slug') || 'None'\r\n    const confidence = _.get(results.intents[0], 'confidence') || 0\r\n    const entities = []\r\n    _.forEach(results.entities, (value, key) => {\r\n      value.forEach(e => entities.push({ ...e, entityType: key }))\r\n    })\r\n\r\n    return {\r\n      intent: {\r\n        name: intentName,\r\n        confidence: confidence,\r\n        provider: 'recast'\r\n      },\r\n      intents: results.intents.map(intent => ({\r\n        name: intent.slug,\r\n        confidence: intent.confidence,\r\n        provider: 'recast'\r\n      })),\r\n      entities: entities.map(entity => {\r\n        let value = _.omit(entity, ['confidence', 'entityType', 'raw'])\r\n        const valueSize = _.size(value)\r\n        if (valueSize === 1) {\r\n          value = value[Object.keys(value)[0]]\r\n        } else if (valueSize === 0) {\r\n          value = entity.raw\r\n        }\r\n\r\n        return {\r\n          name: null,\r\n          type: entity.entityType,\r\n          value,\r\n          original: entity.raw,\r\n          confidence: entity.confidence,\r\n          position: null,\r\n          provider: 'recast'\r\n        }\r\n      }),\r\n      act: results.act, // Recast custom\r\n      type: results.type, // Recast custom\r\n      language: {\r\n        detected: results.language,\r\n        processed: results.processing_language\r\n      },\r\n      sentiment: results.sentiment // Recast custom\r\n    }\r\n  }\r\n\r\n  async getCustomEntities() {\r\n    return this.storage.getCustomEntities()\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/recast.js","import _ from 'lodash'\r\nimport crypto from 'crypto'\r\n\r\nimport zscore from 'zscore'\r\nimport natural from 'natural'\r\n\r\nimport Provider from './base'\r\n\r\nconst NATIVE_HASH_KVS_KEY = 'nlu/native/updateMetadata'\r\nconst NATIVE_MODEL = 'nlu/native/model'\r\nconst DEFAULT_THRESHOLD = 0.25\r\nconst EMPTY_INTENT = {\r\n  name: 'None',\r\n  confidence: 0,\r\n  provider: 'native'\r\n}\r\n\r\nexport default class NativeProvider extends Provider {\r\n  constructor(config) {\r\n    super({ ...config, name: 'native', entityKey: '@native' })\r\n    this.classifier = null\r\n  }\r\n\r\n  async init() {}\r\n\r\n  async checkSyncNeeded() {\r\n    const intents = await this.storage.getIntents()\r\n    return !await this._isInSync(intents)\r\n  }\r\n\r\n  _getProjectName() {\r\n    const scope = 'all'\r\n    return `${this.env}__${this.project}__${scope}`\r\n  }\r\n\r\n  setStemmer(stemmer) {\r\n    if (!stemmer) {\r\n      this.customStemmer = null\r\n    } else if (!_.isFunction(stemmer)) {\r\n      this.logger.error('[NLU::Native] Stemmer must be a function')\r\n      this.customStemmer = null\r\n    } else {\r\n      this.customStemmer = stemmer\r\n    }\r\n  }\r\n\r\n  getStemmer() {\r\n    return { tokenizeAndStem: this._stemText.bind(this) }\r\n  }\r\n\r\n  _stemText(text) {\r\n    if (this.customStemmer) {\r\n      return this.customStemmer(text)\r\n    } else {\r\n      return natural.PorterStemmer.tokenizeAndStem(text)\r\n    }\r\n  }\r\n\r\n  async _isInSync(localIntents) {\r\n    const intentsHash = crypto\r\n      .createHash('md5')\r\n      .update(JSON.stringify(localIntents))\r\n      .digest('hex')\r\n\r\n    const metadata = await this.kvs.get(NATIVE_HASH_KVS_KEY)\r\n    return metadata && metadata.hash === intentsHash\r\n  }\r\n\r\n  async _onSyncSuccess(localIntents) {\r\n    const intentsHash = crypto\r\n      .createHash('md5')\r\n      .update(JSON.stringify(localIntents))\r\n      .digest('hex')\r\n\r\n    // We save the model hash and model to the KVS\r\n    await this.kvs.set(NATIVE_HASH_KVS_KEY, { hash: intentsHash })\r\n    await this.kvs.set(NATIVE_MODEL, JSON.stringify(this.classifier))\r\n  }\r\n\r\n  async _restoreModel() {\r\n    const model = await this.kvs.get(NATIVE_MODEL)\r\n\r\n    if (!model) {\r\n      this.classifier = new natural.BayesClassifier()\r\n    }\r\n\r\n    this.classifier = natural.BayesClassifier.restore(JSON.parse(model), this.getStemmer())\r\n  }\r\n\r\n  async getCustomEntities() {\r\n    // Native NLU doesn't support entity extraction\r\n    return []\r\n  }\r\n\r\n  async sync() {\r\n    const intents = await this.storage.getIntents()\r\n\r\n    if (await this._isInSync(intents)) {\r\n      this.logger.debug('[NLU::Native] Model is up to date')\r\n      return\r\n    } else {\r\n      this.logger.debug('[NLU::Native] The model needs to be updated')\r\n    }\r\n\r\n    const classifier = new natural.BayesClassifier(this.getStemmer())\r\n\r\n    let samples_count = 0\r\n\r\n    intents.forEach(intent => {\r\n      intent.utterances.forEach(utterance => {\r\n        const extracted = this.parser.extractLabelsFromCanonical(utterance, intent.entities)\r\n        samples_count += 1\r\n        classifier.addDocument(this._stemText(extracted.text), intent.name)\r\n      })\r\n    })\r\n\r\n    this.logger.debug(`[NLU::Native] Started training model from ${samples_count} samples`)\r\n\r\n    try {\r\n      classifier.train()\r\n    } catch (err) {\r\n      return this.logger.error(`[NLU::Native] Error training model: ${err.message}`)\r\n    }\r\n\r\n    this.classifier = classifier\r\n\r\n    await this._onSyncSuccess(intents)\r\n\r\n    this.logger.info(`[NLU::Native] Synced model`)\r\n  }\r\n\r\n  async extract(incomingEvent) {\r\n    if (!this.classifier) {\r\n      if (await this.checkSyncNeeded()) {\r\n        await this.sync()\r\n      } else {\r\n        await this._restoreModel()\r\n      }\r\n    }\r\n\r\n    const threshold = parseFloat(this.nativeAdjustementThreshold || DEFAULT_THRESHOLD)\r\n\r\n    const classifications = _.orderBy(this.classifier.getClassifications(incomingEvent.text), ['value'], ['desc'])\r\n\r\n    let allScores = zscore(classifications.map(c => parseFloat(c.value)))\r\n\r\n    allScores = allScores.map((s, i) => {\r\n      const delta = Math.abs(s - allScores[i + 1] / s)\r\n      if (delta >= threshold) {\r\n        return s\r\n      }\r\n\r\n      const res =\r\n        s -\r\n        Math.max(0, allScores[i + 1] || 0) * 0.5 -\r\n        Math.max(0, allScores[i + 2] || 0) * 0.75 -\r\n        Math.max(0, allScores[i + 3] || 0)\r\n\r\n      if (res < 0) {\r\n        return 0\r\n      } else if (res > 1) {\r\n        return 1\r\n      } else {\r\n        return res\r\n      }\r\n    })\r\n\r\n    const intents = _.orderBy(\r\n      classifications.map((c, i) => ({\r\n        name: c.label,\r\n        confidence: allScores[i],\r\n        provider: 'native'\r\n      })),\r\n      ['confidence'],\r\n      'desc'\r\n    )\r\n\r\n    return {\r\n      intent: intents.length ? intents[0] : { ...EMPTY_INTENT },\r\n      intents,\r\n      entities: [] // Unsupported for now\r\n    }\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/native.js","module.exports = require(\"zscore\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"zscore\"\n// module id = 21\n// module chunks = 0","module.exports = require(\"natural\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"natural\"\n// module id = 22\n// module chunks = 0"],"sourceRoot":""}